#@ # 
#@ # Running icc_shell Version J-2014.09-SP1 for amd64 -- Oct 14, 2014
#@ # Date:   Sun May  6 23:32:12 2018
#@ # Run by: cjgooch@linux-lab-040.ee.washington.edu
#@ 

gui_start 
#@ # -- Starting source /home/lab.apps/vlsiapps/icc/current/auxx/tcllib/lib/iwidgets4.0.2/lib/iwidgets/iwidgets.tcl

#@ #
#@ # iwidgets.tcl
#@ # ----------------------------------------------------------------------
#@ # Invoked automatically by [incr Tk] upon startup to initialize
#@ # the [incr Widgets] package.
#@ # ----------------------------------------------------------------------
#@ #  AUTHOR: Mark L. Ulferts               EMAIL: mulferts@spd.dsccc.com
#@ #
#@ #  @(#) $Id: iwidgets.tcl.in,v 1.5 2007/06/10 19:28:16 hobbs Exp $
#@ # ----------------------------------------------------------------------
#@ #                Copyright (c) 1995  Mark L. Ulferts
#@ # ======================================================================
#@ # See the file "license.terms" for information on usage and
#@ # redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ 
#@ package require Tcl 8.0
#@ package require Tk 8.0
#@ package require Itcl 3.2
#@ package require Itk 3.2
#@ 
#@ namespace eval ::iwidgets {
#@     namespace export *
#@ 
#@     variable library [file dirname [info script]]
#@     variable version 4.0.2
#@ 
#@     lappend auto_path $iwidgets::library
#@     variable subdir
#@     foreach subdir {generic scripts} {
#@ 	if {[file isdirectory [file join $iwidgets::library $subdir]]} {
#@ 	    lappend auto_path [file join $iwidgets::library $subdir]
#@ 	}
#@     }
#@     unset subdir
#@ }
#@ 
#@ package provide Iwidgets $iwidgets::version
#@ # -- End source /home/lab.apps/vlsiapps/icc/current/auxx/tcllib/lib/iwidgets4.0.2/lib/iwidgets/iwidgets.tcl

source -echo -verbose /home/projects/ee526.2018spr/cjgooch/gitWorks/toolFlow/pipeTest/sapr/apr/pipelined_apr.tcl
#@ # -- Starting source /home/projects/ee526.2018spr/cjgooch/gitWorks/toolFlow/pipeTest/sapr/apr/pipelined_apr.tcl

#@ # set search path, target lib, link path.
#@ set TSMCPATH /home/lab.apps/vlsiapps/kits/tsmc/N65RF/1.0c_cdb/digital
#@ set TARGETCELLLIB $TSMCPATH/Front_End/timing_power_noise/CCS/tcbn65gplus_200a
#@ set search_path   [concat  $search_path $TARGETCELLLIB ./db  $synopsys_root/libraries/syn]
#@ lappend search_path [glob $TSMCPATH/Back_End/milkyway/tcbn65gplus_200a/cell_frame/tcbn65gplus/LM/*]
#@ set target_library "tcbn65gpluswc0d72_ccs.db tcbn65gplusbc0d88_ccs.db tcbn65gplustc0d8_ccs.db"
#@ set symbol_library tcbn65gplustc0d8_ccs.db
#@ set link_path {"*" tcbn65gpluswc0d72_ccs.db tcbn65gplusbc0d88_ccs.db tcbn65gplustc0d8_ccs.db }
#@ 
#@ #Create a MW design lib map to techfile, reference library (of stdcell for example)
#@ #Milky way variable settings. Same as topo for the most part.
#@ set mw_techfile_path /home/lab.apps/vlsiapps/kits/tsmc/N65RF/1.0c_cdb/digital/Back_End/milkyway/tcbn65gplus_200a/techfiles
#@ set mw_tech_file $mw_techfile_path/tsmcn65_9lmT2.tf
#@ set mw_reference_library $TSMCPATH/Back_End/milkyway/tcbn65gplus_200a/frame_only/tcbn65gplus
#@ create_mw_lib -technology $mw_tech_file -mw_reference_library $mw_reference_library pipelined_design      
#@ open_mw_lib pipelined_design
#@ 
#@ #Read in the verilog, uniquify and save the CEL view.
#@ import_designs pipelined.syn.v -format verilog -top pipelined
#@ 
#@ #set up tlu_plus files (for virtual route and post route extraction)
#@ set_tlu_plus_files -max_tluplus $mw_techfile_path/tluplus/cln65g+_1p09m+alrdl_rcbest_top2.tluplus -min_tluplus $mw_techfile_path/tluplus/cln65g+_1p09m+alrdl_rcworst_top2.tluplus -tech2itf_map $mw_techfile_path/tluplus/star.map_9M
#@ 
#@ #perform consistency checks across all libraries (both logic and physical libraries)
#@ set_check_library_options -all
#@ check_library
#@ check_tlu_plus_files
#@ 
#@ #connect/link all referenced library components to the current design
#@ link
#@ 
#@ #Power Mapping
#@ derive_pg_connection -power_net VDD -power_pin VDD                     -ground_net VSS -ground_pin VSS                     -create_ports "top"
#@ derive_pg_connection -power_net VDD -ground_net VSS                     -tie
#@ check_mv_design -power_nets
#@ 
#@ #Read timing and apply constraints
#@ read_sdc ./pipelined.syn.sdc
#@ # -- Starting source /home/lab.apps/vlsiapps/icc/current/auxx/syn/all_command_option_def.tcl

#@ define_proc_attributes all_physical_only_cells -info "Get the collection of physical only cells" -define_args {
#@ { -coordinates "coordinates of bounding box" "llx lly urx ury" string {optional}} 
#@ { -lib_cells "get cells related to these objects" "objects" list {optional}} 
#@ { -cell_name "list of cell name patterns and collections" "patterns" list {optional}} 
#@ { "" "Existing collection" "arguments" list {optional}} 
#@ }
#@ define_proc_attributes all_physical_only_nets  -info "Get the collection of physical only nets" -define_args {
#@ { "" "list of cell name patterns and collections" "arguments" list {optional}} 
#@ } 
#@ define_proc_attributes all_drc_violated_nets -info "Returns all DRC violated nets" -define_args { 
#@ { -max_capacitance "max Cap DRC violated nets" "" string {optional}} 
#@ { -max_transition "max transition time DRC violated nets" "" string {optional}} 
#@ { -max_fanout "max fanout DRC violated nets" "" string {optional}}
#@ { -threshold "Captures all values more than or equal to threshold" "threshold" string {optional}} 
#@ { -bound "Captures all values less than or equal to bound bound" "upper" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments"  list {optional}} 
#@ }
#@ define_proc_attributes all_fanin -info "return pins or cells in transitive fanin" -define_args { 
#@ { -to "set of sink ports, pins, or nets" "sink_list" list {optional}} 
#@ { -startpoints_only  "return only the timing startpoints" "" string {optional}} 
#@ { -exclude_bboxes "black-boxes are not included in return-set" "" string {optional}} 
#@ { -break_on_bboxes  "traversal stops at black-boxes" "" string {optional}} 
#@ { -only_cells "only cells are included in the return-set" "" string {optional}} 
#@ { -flat "trace entire design instead of just current hierarchy" "" string {optional}} 
#@ { -levels "maximum number of levels of logic to traverse" "n" string {optional}} 
#@ { -trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_high_fanout -info "Returns all high fanout objects" -define_args { 
#@ { -nets "high fanout nets" "" string {optional}} 
#@ { -threshold "high fanout threshold: value>=0" "threshold" string {optional}} 
#@ { -through_buf_inv "treat buffers and inverters as transparent -check for transitive fanout" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_ideal_nets -info "Returns all ideal nets" -define_args { 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_inputs -info "return input ports" -define_args { 
#@ { -clock "ports with input delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive input delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive input delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_outputs -info "return output ports" -define_args { 
#@ { -clock "ports with output delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive output delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive output delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_threestate -info "Returns all threestate objects" -define_args { 
#@ { -nets "threestate nets" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_dont_touch -info "Returns all dont touch objects" -define_args { 
#@ { -nets "Dont touch nets" "" string {optional}} 
#@ { -cells "Dont touch cells" "" string {optional}} 
#@ { "" "Dont touch patterns OR collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_size_only_cells -info "Returns all size_only cells" -define_args { 
#@ { "" "Object patterns OD collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_clocks -info "return all clocks in the current design"  
#@ define_proc_attributes all_designs -info "return all designs" 
#@ define_proc_attributes all_registers  -info "create a collection of register cells or pins" -define_args { 
#@ { -no_hierarchy "only search the top level of hierarchy" "" string {optional}} 
#@ {-rise_clock "return registers triggered by rise edge of this clock" "rise_clock" string {optional}}
#@ {-fall_clock "return registers triggered by rise edge of this clock" "fall_clock" string {optional}}
#@ { -clock "return registers of this clock" "clock" string {optional}} 
#@ { -cells "return cells - this is the default" "" string {optional}} 
#@ { -data_pins "return data_pins" "" string {optional}} 
#@ { -clock_pins "return clock_pins" "" string {optional}} 
#@ { -slave_clock_pins "return slave_clock_pin" "" string {optional}} 
#@ { -inverted_output "return FF's with inverted output phase" "" string {optional}} 
#@ { -output_pins "return output_pins" "" string {optional}} 
#@ { -level_sensitive "only consider level sensitive registers" "" string {optional}} 
#@ { -edge_triggered "only consider edge triggered register" "" string {optional}} 
#@ { -master_slave "only consider master/slave registers" "" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_cells -info "return critical cells" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_pins -info "return critical pins" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ { -type "pintype: Values: endpoint, startpoint" "pin_type" string {optional}} 
#@ }
#@ define_proc_attributes get_magnet_cells -info "return magnet cells collection" -define_args {
#@ { -stop_by_sequential_cells "don't pull sequential cells" "" string {optional}} 
#@ { -exclude_buffers "skip through buffers in levels" "" string {optional}} 
#@ { -exclude_cells "list of excluded cells list" "" string {optional}}
#@ { -logical_level "number of logical levels to pull for placement" "integer" string {optional}} 
#@ { -stop_points "list of stop points where to stop magnetizing paths" "object_list" list {optional}} 
#@ { "" "a list of magnet objects" "magnet_objects" list {optional}} 
#@ }
#@ define_proc_attributes all_fanout -info "return pins or cells in transitive fanout" -define_args {
#@ {-clock_tree "return all clock tree components in design" "" string {optional}}
#@ {-from "set of source ports, pins, or nets" "source_list" list {optional}}
#@ {-endpoints_only "return only the timing endpoints" "" string {optional}}
#@ {-exclude_bboxes "black-boxes are not included in return-set" "" string {optional}}
#@ {-break_on_bboxes "traversal stops at black-boxes" "" string {optional}}
#@ {-only_cells "only cells are included in the return-set" "" string {optional}}
#@ {-flat "trace entire design instead of just current hierarchy" "" string {optional}}
#@ {-levels "maximum number of levels of logic to traverse" "n" string {optional}}
#@ {-trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_physical_only_ports -info " Get the collection of physical only ports" -define_args {
#@ {"" "list of cell name patterns and collections" "arguments" list {optional}}
#@ }
#@ define_proc_attributes get_matching_nets_for_pattern -info "Get matched nets for a certain net pattern" -define_args { 
#@ { -pattern "pattern id" "integer" string {optional}} 
#@ { -optimizable "Return all nets that can be optimized" "" string {optional}} 
#@ { -transition_lower_limit "nets with transition equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -transition_upper_limit "nets with transition less than upper limit" "upper_limit" string {optional}} 
#@ { -setup_slack_lower_limit "nets with slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -setup_slack_upper_limit "nets with slack less than upper limit" "upper_limit" string {optional}} 
#@ { -hold_slack_lower_limit "nets with hold slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -hold_slack_upper_limit "nets with hold slack less than upper limit" "upper_limit" string {optional}} 
#@ }
#@ # -- End source /home/lab.apps/vlsiapps/icc/current/auxx/syn/all_command_option_def.tcl

#@ check_timing
#@ 
#@ #Check for false or multicycle path settings, any disabled arcs and case_analysis settings
#@ report_timing_requirements
#@ report disable_timing
#@ report_case_analysis
#@ 
#@ #Define environment
#@ set_operating_conditions -analysis_type bc_wc  -min BC0D88COM -max WC0D72COM  -max_library tcbn65gpluswc0d72_ccs -min_library tcbn65gplusbc0d88_ccs
#@ set_min_library tcbn65gpluswc0d72_ccs.db -min_version tcbn65gplusbc0d88_ccs.db
#@ 
#@ #Loading and drive settings. 
#@ # set_drive_cell for inputs
#@ set_driving_cell -lib_cell INVD1 reset
#@ set_driving_cell -lib_cell INVD1 clk
#@ #set_driving_cell -lib_cell INVD1 A
#@ #set_driving_cell -lib_cell INVD1 B
#@ # set_load for outputs
#@ #set_load [load_of tcbn65gpluswc0d72_ccs/INVD1/I] [get_ports Status]
#@ #set_load [load_of tcbn65gpluswc0d72_ccs/INVD1/I] [get_ports Output1]
#@ #set_load [load_of tcbn65gpluswc0d72_ccs/INVD1/I] [get_ports Output2]
#@ 
#@ link
#@ 
#@ #Define design constraints
#@ set_max_transition 0.1 [get_designs pipelined]
#@ set_max_fanout 6 pipelined
#@ create_clock -name "clk" -period 2 -waveform {0 1} [get_ports clk] 
#@ set_clock_uncertainty -setup 0.05 clk
#@ set_clock_uncertainty -hold 0.01 clk
#@ set_clock_transition 0.05 [get_clocks]
#@ set_input_delay 0.1 -clock clk [remove_from_collection [all_inputs] [get_ports clk]]
#@ 
#@ #Check clock health and assumptions
#@ report_clock -skew
#@ report_clock
#@ 
#@ #Apply timing and optimization control. 
#@ #set_dont_use and set_prefer -min<hold_fixing_cells> are likely candidates 
#@ set_app_var timing_enable_multiple_clocks_per_reg true
#@ set_fix_multiple_port_nets -all -buffer_constants
#@ group_path -name INPUTS -from [all_inputs]
#@ group_path -name OUTPUTS -to [all_outputs]
#@ 
#@ #Check that timing constraints are all good
#@ set_zero_interconnect_delay_mode true
#@ report_constraint -all
#@ report_timing
#@ set_zero_interconnect_delay_mode false
#@ 
#@ #save current milkyway Design so you can obtain it again with open_mw_cel ....
#@ save_mw_cel -as pipelined_data_setup
#@ 
#@ #Now you're ready to floorplan the design
#@ create_floorplan -control_type aspect_ratio                 -core_aspect_ratio 1                 -core_utilization 0.8                 -left_io2core 3                 -right_io2core 3                 -top_io2core 3                 -bottom_io2core 3
#@ 
#@ #Plan your power. The outer ring extends out to hit the pin and inner stripe shrinks to cover the core.
#@ create_rectangular_rings  -nets  {VSS VDD}                          -around core                          -left_segment_layer M2                           -left_segment_width 1                          -right_segment_layer M2                          -right_segment_width 1                          -bottom_segment_layer M1                          -bottom_segment_width 1                          -top_segment_layer M1                           -top_segment_width 1                          -left_offset 0.5                          -right_offset 0.5                          -bottom_offset 0.5                          -top_offset 0.5
#@ create_power_straps -direction horizontal                     -extend_high_ends to_boundary_and_generate_pins                       -extend_low_ends to_boundary_and_generate_pins                       -nets  {VSS VDD}                       -layer M1                      -width 0.33                       -configure rows                      -step 3.6                      -pitch_within_group 1.8
#@ 
#@ 
#@ 
#@ #Run placement, fixing timing violations and congestion. 
#@ create_fp_placement 
#@ 
#@ #save current design
#@ save_mw_cel -as pipelined_post_place
#@ 
#@ #define clock contrains
#@ set cts_force_user_constraints true
#@ set_max_transition 1 [get_clocks clk]
#@ set_clock_tree_options  -clock_trees clk                        -layer_list {M1 M2 M3 M4 M5 M6 M7}                        -target_skew 0.1                        -max_capacitance [load_of tcbn65gpluswc0d72_ccs/INVD8/I]                        -max_transition 0.15                        -max_fanout 8                        -max_rc_delay 0.3                        -use_default_routing_for_sinks 1                        -logic_level_balance true
#@ 
#@ clock_opt -inter_clock_balance          -update_clock_latency          -operating_condition max          -only_cts
#@ 
#@ route_zrt_group -all_clock_nets -reuse_existing_global_route true
#@ 
#@ #save current design
#@ save_mw_cel -as pipelined_post_clk_route
#@ 
#@ #Fills empty spaces in std cell rows w/ filler cells
#@ insert_stdcell_filler -cell_with_metal {GFILL10 GFILL4 GFILL3 GFILL2 GFILL1}                      -connect_to_power "VDD"                      -connect_to_ground "VSS"
#@ 
#@ #Finally, connect all power and ground pins
#@ derive_pg_connection -cells [get_cells] -power_net VDD -ground_net VSS
#@ 
#@ #Route
#@ route_opt
#@ 
#@ #Run DRC, LVS
#@ signoff_drc -check_all_layers
#@ list_drc_error_types
#@ set short_errors [get_drc_errors -type {Short}]
#@ verify_lvs
#@ 
#@ #save the final design
#@ save_mw_cel -as pipelined_post_route
#@ 
#@ #Avoid issues with upper/lower case confusion esp with spice.
#@ define_name_rules STANDARD -case
#@ change_names -rules STANDARD
#@ 
#@ #Parasitics write out
#@ extract_rc
#@ write_parasitics
#@ 
#@ #Write out design data
#@ write_def -lef may_need_for_rotated_vias.lef           -output "pipelined.def"          -all_vias
#@ 
#@ #Write out Verilog of finalized design
#@ write_verilog pipelined_apr.v               -pg              -unconnected_ports
#@ 
#@ #Write out delay and constraints
#@ write_sdf -context verilog -version 1.0 pipelined_apr.sdf
#@ # -- End source /home/projects/ee526.2018spr/cjgooch/gitWorks/toolFlow/pipeTest/sapr/apr/pipelined_apr.tcl

exit
